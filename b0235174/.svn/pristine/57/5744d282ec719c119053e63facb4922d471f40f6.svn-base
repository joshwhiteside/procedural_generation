#include "renderer.h"

Renderer::Renderer(Window &parent) : OGLRenderer(parent)	{
	camera	= new Camera(0.0f,135.0f,Vector3(1750.0f,400.0f,1750.0f));
	quad	= Mesh::GenerateQuad();

	heightMap = new HeightMap(TEXTUREDIR"terrain.raw");

	heightMap->SetTexture(
	SOIL_load_OGL_texture(TEXTUREDIR"Barren Reds.JPG",
	SOIL_LOAD_AUTO, SOIL_CREATE_NEW_ID, SOIL_FLAG_MIPMAPS));

	jTex = SOIL_load_OGL_texture(TEXTUREDIR"nonsense.tga",
	SOIL_LOAD_AUTO, SOIL_CREATE_NEW_ID, SOIL_FLAG_MIPMAPS);
	


	sceneShader		= new Shader(SHADERDIR"TexturedVertex.glsl",
								 SHADERDIR"TexturedFragment.glsl");
	depthShader		= new Shader(SHADERDIR"TexturedVertex.glsl",
								 SHADERDIR"depthfrag.glsl");
	processShader	= new Shader(SHADERDIR"TexturedVertex.glsl",
								 SHADERDIR"processfrag.glsl");
	dofShader		= new Shader(SHADERDIR"TexturedVertex.glsl",
								 SHADERDIR"dofFrag.glsl");
	juliaShader		= new Shader(SHADERDIR"jVert.glsl",
								 SHADERDIR"jFrag.glsl");


	if(!processShader->LinkProgram() || !sceneShader->LinkProgram() ||!depthShader->LinkProgram() || !dofShader->LinkProgram() || !juliaShader->LinkProgram() ||
		!heightMap->GetTexture()) {
		return;
	}

	SetTextureRepeating(heightMap->GetTexture(),true);

	glGenTextures(1, &bufferDepthTex);
	glBindTexture(GL_TEXTURE_2D, bufferDepthTex);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH24_STENCIL8, width, height,
		0, GL_DEPTH_STENCIL, GL_UNSIGNED_INT_24_8, NULL);
	glBindTexture(GL_TEXTURE_2D, 0);


	for(int i = 0; i < 3; ++i) {
		glGenTextures(1, &bufferColourTex[i]);
		glBindTexture(GL_TEXTURE_2D, bufferColourTex[i]);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
		glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA, width, height,
			0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
	}

	glBindTexture(GL_TEXTURE_2D, 0);

	glGenFramebuffers(1, &bufferFBO);
	glGenFramebuffers(1, &processFBO);

	glBindFramebuffer(GL_FRAMEBUFFER, bufferFBO);

	GLenum buffers[2];
	buffers[0] = GL_COLOR_ATTACHMENT0;
	buffers[1] = GL_COLOR_ATTACHMENT1;


	glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT,
						   GL_TEXTURE_2D, bufferDepthTex, 0);
	glFramebufferTexture2D(GL_FRAMEBUFFER, GL_STENCIL_ATTACHMENT,
						   GL_TEXTURE_2D, bufferDepthTex, 0);
	glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
						   GL_TEXTURE_2D, bufferColourTex[0], 0);
	glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT1,
						   GL_TEXTURE_2D, bufferColourTex[2], 0);

	glDrawBuffers(2, buffers);



	if(glCheckFramebufferStatus(GL_FRAMEBUFFER) !=
		GL_FRAMEBUFFER_COMPLETE || !bufferDepthTex || !bufferColourTex[0]) {
			return;
	}
	glBindFramebuffer(GL_FRAMEBUFFER,0);
	glEnable(GL_DEPTH_TEST);
	init = true;

	//cycle = (float)(-(rand()%1000) /1000.0f);
	cycle = Vector2(-0.7f,0.27015);
}


Renderer::~Renderer(void)	{
	delete sceneShader;
	delete processShader;
	delete dofShader;
	delete depthShader;
	currentShader = NULL;

	delete heightMap;
	delete quad;
	delete camera;
	glDeleteTextures(3,bufferColourTex);
	glDeleteTextures(1,&bufferDepthTex);

	glDeleteFramebuffers(1,&bufferFBO);
	glDeleteFramebuffers(1,&processFBO);

}

void Renderer::UpdateScene(float msec)	{
	camera->UpdateCamera(msec);
	viewMatrix = camera->BuildViewMatrix();
}

void Renderer::RenderScene() {
	//DrawScene();
	//DrawPostProcess();
	
	//These 3 do stuff
	DrawDepthofField();
	//PresentScene();
	DrawDepthBuffer();

	//DrawJulia();
	PresentScene();
	SwapBuffers();
}

void Renderer::DrawScene()	{
	glBindFramebuffer(GL_FRAMEBUFFER, bufferFBO);
	glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT |
			GL_STENCIL_BUFFER_BIT);
	SetCurrentShader(sceneShader);

	projMatrix		= Matrix4::Perspective(1.0f,10000.0f,
					  (float) width / (float) height, 45.0f);

	UpdateShaderMatrices();

	heightMap->Draw();

	glUseProgram(0);

	glBindFramebuffer(GL_FRAMEBUFFER, 0 );


}

void Renderer::DrawPostProcess()	{
	glBindFramebuffer(GL_FRAMEBUFFER, processFBO);
	glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
							GL_TEXTURE_2D, bufferColourTex[1], 0);
	glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);

	SetCurrentShader(processShader);

	projMatrix = Matrix4::Orthographic(-1,1,1,-1,-1,1);

	viewMatrix.ToIdentity();

	UpdateShaderMatrices();

	glDisable(GL_DEPTH_TEST);

	glUniform2f(glGetUniformLocation(currentShader->GetProgram(),
				"pixelSize"), 1.0f/ width, 1.0f/ height);


	for(int i = 0; i < POST_PASSES; ++i) {
		glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
							   GL_TEXTURE_2D, bufferColourTex[1], 0);

		glUniform1i(glGetUniformLocation(currentShader->GetProgram(),
					"isVertical"), 0);

		quad->SetTexture(bufferColourTex[0]);
		quad->Draw();

		glUniform1i(glGetUniformLocation(currentShader->GetProgram(),
										 "isVertical"), 1);

		glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
								GL_TEXTURE_2D, bufferColourTex[0], 0 );

		quad->SetTexture(bufferColourTex[1]);
		quad->Draw();

	}
	glBindFramebuffer(GL_FRAMEBUFFER,0);
	glUseProgram(0);

	glEnable(GL_DEPTH_TEST);

}

void Renderer::DrawDepthofField(){
	DrawScene();	
	DrawPostProcess();
	
	glBindFramebuffer(GL_FRAMEBUFFER, processFBO);
	
	glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
							GL_TEXTURE_2D, bufferColourTex[1], 0);
	glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);

	SetCurrentShader(dofShader);

	projMatrix = Matrix4::Orthographic(-1,1,1,-1,-1,1);

	viewMatrix.ToIdentity();

	UpdateShaderMatrices();

	glDisable(GL_DEPTH_TEST);

	glUniform2f(glGetUniformLocation(currentShader->GetProgram(),
				"pixelSize"), 1.0f/ width, 1.0f/ height);
	
	quad->SetTexture (bufferDepthTex);
	quad->SetTexture2(bufferColourTex[0]);
	quad->SetBumpMap (bufferColourTex[2]);

	glUniform1i(glGetUniformLocation(currentShader->GetProgram(),
										"bumpTex"), 1);
	glUniform1i(glGetUniformLocation(currentShader->GetProgram(),
										"secondTex"), 2);

	//glUniform1i(

	quad->Draw();

	glBindFramebuffer(GL_FRAMEBUFFER,0);
	
	glEnable(GL_DEPTH_TEST);
}



void Renderer::PresentScene()	{
	glBindFramebuffer(GL_FRAMEBUFFER, 0);

	glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);

	SetCurrentShader(sceneShader);
	projMatrix = Matrix4::Orthographic(-1,1,1,-1,-1,1);

	viewMatrix.ToIdentity();
	UpdateShaderMatrices();
	quad->SetTexture(bufferColourTex[1]);
	quad->Draw();

	glUseProgram(0);
}

void Renderer::DrawJulia() {
	cycle.x+=0.01f;
	cycle.y+=0.01f;
	
	glBindFramebuffer(GL_FRAMEBUFFER, processFBO);
	glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
							GL_TEXTURE_2D, bufferColourTex[1], 0);
	glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);

	SetCurrentShader(juliaShader);

	projMatrix = Matrix4::Orthographic(-1,1,1,-1,-1,1);

	viewMatrix.ToIdentity();

	UpdateShaderMatrices();

	glDisable(GL_DEPTH_TEST);


	glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
							   GL_TEXTURE_2D, bufferColourTex[1], 0);

	quad->SetTexture(jTex);

	glUniform2f(glGetUniformLocation(currentShader->GetProgram(),
										 "cycle"), cycle.x, cycle.y);

	quad->Draw();

	glBindFramebuffer(GL_FRAMEBUFFER,0);
	glUseProgram(0);

	glEnable(GL_DEPTH_TEST);
}


void Renderer::DrawDepthBuffer()	{
	glBindFramebuffer(GL_FRAMEBUFFER, 0);
	
	glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);

	
	SetCurrentShader(depthShader);

	glUniform2f(glGetUniformLocation(currentShader->GetProgram(),
		"pixelSize"), 1.0f/ width, 1.0f/ height);
	glUniform1i(glGetUniformLocation(currentShader->GetProgram(),
										 "bumpTex"), 1);
	projMatrix = Matrix4::Orthographic(-1,1,1,-1,-1,1);

	viewMatrix.ToIdentity();
	UpdateShaderMatrices();
	quad->SetTexture(bufferDepthTex);
	quad->SetBumpMap(bufferColourTex[1]);
	quad->Draw();

	glUseProgram(0);
}